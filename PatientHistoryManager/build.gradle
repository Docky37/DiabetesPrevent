// MedicalFileManager

plugins {
	id 'org.springframework.boot' version '2.4.1'
	id 'io.spring.dependency-management' version '1.0.10.RELEASE'
	id 'java'
	id 'jacoco'
	id 'checkstyle'
	id "com.github.spotbugs" version "4.6.0"
}

apply plugin: "com.github.spotbugs"

group = 'com.mediscreen'
version = '0.0.1-BETA'
sourceCompatibility = '11'

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-actuator'
	//implementation 'org.springframework.boot:spring-boot-starter-security'
	implementation 'org.springframework.boot:spring-boot-starter-webflux'
	implementation 'org.springframework.boot:spring-boot-starter-hateoas'
	compileOnly 'org.projectlombok:lombok'
	developmentOnly 'org.springframework.boot:spring-boot-devtools'
	annotationProcessor 'org.projectlombok:lombok'

	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation group: 'org.junit.jupiter', name: 'junit-jupiter-params', version: '5.7.0'
    testImplementation 'io.projectreactor:reactor-test'
	testImplementation group: 'com.squareup.okhttp3', name: 'okhttp', version: '4.9.0'
	testImplementation group: 'com.squareup.okhttp3', name: 'mockwebserver', version: '4.9.0'
	testImplementation 'org.springframework.security:spring-security-test'

   	implementation group: 'com.puppycrawl.tools', name: 'checkstyle', version: '8.37'
	implementation "io.springfox:springfox-boot-starter:3.0.0"

}

// BOOT JAR ********************************************************************
bootJar {
    manifest {
        attributes 'Start-Class': 'com.mediscreen.history.manager.PatientHistoryManagerApplication'
    }
    
}

test {
	useJUnitPlatform()
    
    String testType = System.properties['test.type']
    if (testType == 'integration') {
        include '**/*IntegrationTest.*'
        include '**/*IntegrationSpec.*'
    } else if (testType == 'unit') {
        include '**/*Test.*'
        include '**/*Spec.*'
        exclude '**/*IntegrationTest.*'
        exclude '**/*IntegrationSpec.*'
    } else if (testType == 'all') {
        include '**/*Test.*'
        include '**/*Spec.*'
    } else {
        //Default to unit
        include '**/*Test.*'
        include '**/*Spec.*'
        exclude '**/*IntegrationTest.*'
        exclude '**/*IntegrationSpec.*'
    }
    
    jacoco {
        enabled = true
        destinationFile = file("$buildDir/jacoco/${name}.exec")
        includes = []
        excludes = []
        excludeClassLoaders = []
        includeNoLocationClasses = false
        sessionId = "<auto-generated value>"
        dumpOnExit = true
        classDumpDir = null
        output = JacocoTaskExtension.Output.FILE
        address = "localhost"
        port = 6300
        jmx = false
    }
}

// JACOCO **********************************************************************
jacoco {
    toolVersion = "0.8.4"
}

jacocoTestCoverageVerification {
  violationRules {
    rule {
      limit {
        counter = 'LINE'
        value = 'COVEREDRATIO'
        minimum = 0.5
      }
    }
  }
}

jacocoTestReport {
    reports {
        xml.enabled true
        csv.enabled false
        html.destination file("${buildDir}/jacocoHtml")
    }
    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it,
                    exclude: ['**/libs/**']
            )
        }))
    }
}
test.finalizedBy jacocoTestReport
check.dependsOn jacocoTestCoverageVerification

// CHECKSTYLE *************************************************
checkstyle {
    configFile = file('config/checkstyle-checker.xml');
    reportsDir = file("$project.buildDir/reports/checkstyle/")
}

checkstyleTest.enabled = false

tasks.withType(Checkstyle) {
    reports {
        xml.enabled false
        html.enabled true
    }
}

// SPOTBUGS ****************************************************
spotbugsMain {
    reports {
        xml.enabled = false
        html.enabled = true
    }
}
spotbugs {
    spotbugsTest.enabled = false
    spotbugsMain.enabled = true
}