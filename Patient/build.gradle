//Patient

plugins {
	id 'org.springframework.boot' version '2.4.0'
	id 'io.spring.dependency-management' version '1.0.10.RELEASE'
	id 'java'
	id 'jacoco'
	id 'checkstyle'
	id "com.github.spotbugs" version "4.6.0"
}

apply plugin: "com.github.spotbugs"

group = 'com.mediscreen'
version = '1.0'
sourceCompatibility = '11'

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-data-rest'
	runtimeOnly 'mysql:mysql-connector-java'
	implementation group: 'javax.validation', name: 'validation-api', version: '2.0.1.Final'	
	compileOnly 'org.projectlombok:lombok'
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation('org.springframework.boot:spring-boot-starter-test') {
		exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
	}
}

// BOOT JAR ********************************************************************
bootJar {
    manifest {
        attributes 'Start-Class': 'com.mediscreen.patient.PatientApplication'
    }
    
}

test {
	useJUnitPlatform()
    String testType = System.properties['test.type']
    if (testType == 'integration') {
        include '**/*IntegrationTest.*'
        include '**/*IntegrationSpec.*'
    } else if (testType == 'unit') {
        include '**/*Test.*'
        include '**/*Spec.*'
        exclude '**/*IntegrationTest.*'
        exclude '**/*IntegrationSpec.*'
    } else if (testType == 'all') {
        include '**/*Test.*'
        include '**/*Spec.*'
    } else {
        //Default to unit
        include '**/*Test.*'
        include '**/*Spec.*'
        exclude '**/*IntegrationTest.*'
        exclude '**/*IntegrationSpec.*'
    }
    
    jacoco {
        enabled = true
        destinationFile = file("$buildDir/jacoco/${name}.exec")
        includes = []
        excludes = []
        excludeClassLoaders = []
        includeNoLocationClasses = false
        sessionId = "<auto-generated value>"
        dumpOnExit = true
        classDumpDir = null
        output = JacocoTaskExtension.Output.FILE
        address = "localhost"
        port = 6300
        jmx = false
    }
}
test.finalizedBy jacocoTestReport
check.dependsOn jacocoTestCoverageVerification

// CHECKSTYLE *************************************************
checkstyle {
    configFile = file('config/checkstyle-checker.xml');
    reportsDir = file("$project.buildDir/reports/checkstyle/")
}

checkstyleTest.enabled = false

tasks.withType(Checkstyle) {
    reports {
        xml.enabled false
        html.enabled true
    }
}

// SPOTBUGS****************************************************
spotbugsMain {
    reports {
        xml.enabled = false
        html.enabled = true
    }
}
spotbugs {
    spotbugsTest.enabled = true
    spotbugsMain.enabled = true
}
